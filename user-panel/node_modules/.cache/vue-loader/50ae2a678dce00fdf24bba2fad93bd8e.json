{"remainingRequest":"/Users/lizzetclifton/Documents/Fall 2019/CS_408/CS408-Sparc/Sparc_Hosted/user-panel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lizzetclifton/Documents/Fall 2019/CS_408/CS408-Sparc/Sparc_Hosted/user-panel/src/pages/HostUpcomingEvents.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lizzetclifton/Documents/Fall 2019/CS_408/CS408-Sparc/Sparc_Hosted/user-panel/src/pages/HostUpcomingEvents.vue","mtime":1569536591581},{"path":"/Users/lizzetclifton/Documents/Fall 2019/CS_408/CS408-Sparc/Sparc_Hosted/user-panel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizzetclifton/Documents/Fall 2019/CS_408/CS408-Sparc/Sparc_Hosted/user-panel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lizzetclifton/Documents/Fall 2019/CS_408/CS408-Sparc/Sparc_Hosted/user-panel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lizzetclifton/Documents/Fall 2019/CS_408/CS408-Sparc/Sparc_Hosted/user-panel/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\n  import moment from 'moment'\n\nexport default {\n    name: 'host-upcoming-engagements',\n    data() {\n      return {\n        userEvents: [],\n        hostedEvents: [],\n        rating: 5,\n        currentDate: null,\n        foundEvents: []\n      }\n    },\n    computed : {\n        ...mapGetters(['getEvents', 'allRatings']),\n      //   getSelectedEvents() {\n      //     this.foundEvents = []\n      //     return this.userEvents.map(event_id=> {\n      //     let event_item=this.getEvents.find(event_item=> {\n      //       if(event_item.id==event_id && event_item.deleted == false && Date.parse(this.currentDate) <= Date.parse(event_item.date)) {\n      //         this.foundEvents.push(event_item)\n      //       }\n      //     })\n      //       return this.foundEvents;\n\n      //       })\n      // },\n      thevents() {\n          return this.userEvents.map(event_id=> {\n                        // let event_date=moment(this.selected_event.date).format(\"MM/DD/YYYY\")\n            // return moment(event_date).isBefore(moment().format(\"MM/DD/YYYY\"))\n          let event_item=this.getEvents.find(event_item=> event_item.id==event_id )// Date.parse(this.currentDate) <= Date.parse(event_item.date))\n\nreturn event_item;\n          })\n      },\n      dates(){\n       return this.thevents.filter(event_item=>moment(event_item.date).isAfter(moment().format('MM/DD/YYYY'))==true && event_item.deleted == false)\n      }\n\n      // filterUpcoming() {\n      //     let event = this.getSelectedEvents.filter(event => Date.parse(this.currentDate) <= Date.parse(event.date))\n      //     return event\n      //   }\n    },\n    watch:{\n      getEvents(){\n         if(this.getEvents.length>0){\n              console.log(this.thevents)\n              console.log(this.dates)\n              this.foundEvents=this.dates\n        // console.log(this.getEvents.find(event_item=>event_item.id==id))\n\n         }\n      }\n    },\n    methods: {\n      viewEvent(id) {\n        this.$router.push({path: '/events/'+id})\n      },\n      getRatings(id) {\n      let avgRating = [];\n      this.allRatings.filter(rating => {\n        if(rating.host_id == id) {\n          avgRating.push(rating.ratingStars)\n        }\n      })\n\n      if(avgRating.length > 0) {\n        let sum = 0.0;\n        let avg = 0.0;\n\n        for(var i = 0; i < avgRating.length; i++) {\n          sum += avgRating[i]\n        }\n        avg = sum / avgRating.length;\n        return avg\n      }\n    },\n    },\n    created() {\n        var today = new Date();\n        var dd = today.getDate();\n        var mm = today.getMonth() + 1;\n        var yyyy = today.getFullYear();\n\n        this.currentDate = mm + \"/\" + dd + \"/\" + yyyy;\n      const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));\n      for(var key in loggedUser.events_hosted){\n        this.userEvents.push(loggedUser.events_hosted[key])\n      }\n\n      if(this.getEvents.length>0){\n              console.log(this.thevents)\n              console.log(this.dates)\n              this.foundEvents=this.dates\n         }\n\n      console.log(this.thevents)\n      // console.log(moment('4/4/2019').isAfter(moment().format(\"MM/DD/YYYY\")))\n\n\n      //console.log(\"Count \" + loggedUser.events_hosted)\n      // this.userEvents = loggedUser.events_hosted\n      // console.log(\"Events \" + this.userEvents[0])\n    }\n}\n",{"version":3,"sources":["HostUpcomingEvents.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA","file":"HostUpcomingEvents.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <div>\n    <div class=\"main\">\n      <div class=\"section section-images\">\n        <div class=\"container\">\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h2>Upcoming Engagements</h2>\n                <div class=\"row\">\n\n                <div class=\"col-md-4\" v-for=\"(event, index) in foundEvents\" :key=\"index\" >\n                  <div @click=\"viewEvent(event.id)\" style=\"cursor: pointer\" v-if=\"Date.parse(currentDate) <= Date.parse(event.date)\">\n                      <div class=\"card\">\n                        <div class=\"card-header\">\n                            <img v-if=\"event.event_image != null\" :src=\"event.event_image\" class=\"lizzet_image\" alt=\"\">\n                            <img v-else src=\"../../public/sparcS.png\" class=\"lizzet_image\" alt=\"\">\n                        </div>\n                        <div class=\"card-body\" style= \"height:200px; position:relative;\">\n                            <h5 class=\"text-success title-up\"><b> {{ event.event_name }} </b></h5>\n                            <h6 class=\"text-info\"> <i class=\"fa fa-map-marker\"></i> {{ event.event_location }}</h6>\n                            <h6 class=\"text-info\"> <i class=\"fa fa-clock-o\"></i> {{ event.start_time + \" - \" + event.end_time }} </h6>\n                            <h6 class=\"text-info\"> <i class=\"fa fa-calendar\"></i> {{ event.date }}</h6>\n                            <h6> <star-rating :rating=\"getRatings(event.created_by)\" :increment=\"0.1\" :star-size=\"16\" :read-only=\"true\"></star-rating></h6>\n                        </div>\n                      </div>\n                  </div>\n\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n  import moment from 'moment'\n\nexport default {\n    name: 'host-upcoming-engagements',\n    data() {\n      return {\n        userEvents: [],\n        hostedEvents: [],\n        rating: 5,\n        currentDate: null,\n        foundEvents: []\n      }\n    },\n    computed : {\n        ...mapGetters(['getEvents', 'allRatings']),\n      //   getSelectedEvents() {\n      //     this.foundEvents = []\n      //     return this.userEvents.map(event_id=> {\n      //     let event_item=this.getEvents.find(event_item=> {\n      //       if(event_item.id==event_id && event_item.deleted == false && Date.parse(this.currentDate) <= Date.parse(event_item.date)) {\n      //         this.foundEvents.push(event_item)\n      //       }\n      //     })\n      //       return this.foundEvents;\n\n      //       })\n      // },\n      thevents() {\n          return this.userEvents.map(event_id=> {\n                        // let event_date=moment(this.selected_event.date).format(\"MM/DD/YYYY\")\n            // return moment(event_date).isBefore(moment().format(\"MM/DD/YYYY\"))\n          let event_item=this.getEvents.find(event_item=> event_item.id==event_id )// Date.parse(this.currentDate) <= Date.parse(event_item.date))\n\nreturn event_item;\n          })\n      },\n      dates(){\n       return this.thevents.filter(event_item=>moment(event_item.date).isAfter(moment().format('MM/DD/YYYY'))==true && event_item.deleted == false)\n      }\n\n      // filterUpcoming() {\n      //     let event = this.getSelectedEvents.filter(event => Date.parse(this.currentDate) <= Date.parse(event.date))\n      //     return event\n      //   }\n    },\n    watch:{\n      getEvents(){\n         if(this.getEvents.length>0){\n              console.log(this.thevents)\n              console.log(this.dates)\n              this.foundEvents=this.dates\n        // console.log(this.getEvents.find(event_item=>event_item.id==id))\n\n         }\n      }\n    },\n    methods: {\n      viewEvent(id) {\n        this.$router.push({path: '/events/'+id})\n      },\n      getRatings(id) {\n      let avgRating = [];\n      this.allRatings.filter(rating => {\n        if(rating.host_id == id) {\n          avgRating.push(rating.ratingStars)\n        }\n      })\n\n      if(avgRating.length > 0) {\n        let sum = 0.0;\n        let avg = 0.0;\n\n        for(var i = 0; i < avgRating.length; i++) {\n          sum += avgRating[i]\n        }\n        avg = sum / avgRating.length;\n        return avg\n      }\n    },\n    },\n    created() {\n        var today = new Date();\n        var dd = today.getDate();\n        var mm = today.getMonth() + 1;\n        var yyyy = today.getFullYear();\n\n        this.currentDate = mm + \"/\" + dd + \"/\" + yyyy;\n      const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));\n      for(var key in loggedUser.events_hosted){\n        this.userEvents.push(loggedUser.events_hosted[key])\n      }\n\n      if(this.getEvents.length>0){\n              console.log(this.thevents)\n              console.log(this.dates)\n              this.foundEvents=this.dates\n         }\n\n      console.log(this.thevents)\n      // console.log(moment('4/4/2019').isAfter(moment().format(\"MM/DD/YYYY\")))\n\n\n      //console.log(\"Count \" + loggedUser.events_hosted)\n      // this.userEvents = loggedUser.events_hosted\n      // console.log(\"Events \" + this.userEvents[0])\n    }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}