{"remainingRequest":"/Users/ericlin/Documents/Duke/Junior/Fall/CS408/Sparc_Hosted/user-panel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ericlin/Documents/Duke/Junior/Fall/CS408/Sparc_Hosted/user-panel/src/pages/EventDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ericlin/Documents/Duke/Junior/Fall/CS408/Sparc_Hosted/user-panel/src/pages/EventDetails.vue","mtime":1569422283379},{"path":"/Users/ericlin/Documents/Duke/Junior/Fall/CS408/Sparc_Hosted/user-panel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericlin/Documents/Duke/Junior/Fall/CS408/Sparc_Hosted/user-panel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ericlin/Documents/Duke/Junior/Fall/CS408/Sparc_Hosted/user-panel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericlin/Documents/Duke/Junior/Fall/CS408/Sparc_Hosted/user-panel/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nlet stripe = Stripe(`pk_test_VkqrGCFhu1QHtAQJ5xtAYdIH00dooEGlrN`),\n    elements = stripe.elements(),\n    card = undefined;\nimport { Parallax, FormGroupInput, Alert, Modal } from '@/components';\nimport axios from 'axios'\nimport { mapGetters, mapActions } from 'vuex'\nexport default {\n  name: 'event-details',\n  bodyClass: 'event-details-page',\n  destroyed() {\n    card.destroy(this.$refs.card)\n  },\n   mounted: function () {\n\n     let style = {\n      base: {\n        color: '#32325d',\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#aab7c4'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n\n    };\n    card = elements.create('card', {style: style});\n    card.mount(this.$refs.card);\n  },\n  components: {\n    Parallax,\n    Alert,\n    Modal,\n    [FormGroupInput.name]: FormGroupInput,\n  },\n  data() {\n    return {\n      \n      noImage: require('../../public/sparcS.png'),\n      modals: {\n        participateModal: false,\n        selectModal: false,\n        payModal: false\n      },\n      url: window.location.href,\n      rating: 0,\n      eventRating: 5,\n      success: null,\n      event: [],\n      fetchedTags: [],\n      tagName: [],\n      newEvent: {\n          id: null,\n          userId: null\n      },\n      msg: null,\n      userEvents: [],\n      ratedEvents: [],\n      total: 0,\n      totalVirtual: 0,\n      currentDate: null,\n      userDetails: {},\n      participated: false,\n      participantsList: [],\n\n      submitEventRating: {\n        ratingStars: null,\n        feedback: null,\n        host_id: null,\n        event_id: null,\n        user_id: null,\n      },\n\n      isUserParticipant: false,\n      isUserRated: false,\n      isUserLogged: false,\n      fetchedRatings: [],\n      shown: true,\n      userEmail: null,\n      type: null,\n      disablePay: false\n    }\n  },\n  computed: {\n    ...mapGetters(['getSelectedEvent', 'allTags', 'getParticipants', 'getVirtualParticipants', 'user','allUsers', 'allRatings', 'ratingDone']),\n\n    getEventTags() {\n        this.fetchedTags = this.getSelectedEvent[0].tags\n        return this.fetchedTags.map(element => {\n            let eventTag = this.allTags.find(tag => tag.id==element)\n            return eventTag\n        });   \n    },\n\n    getParticipantsList() {\n      this.participantsList = [];\n      return this.getParticipants.map(item => {\n        let user_item = this.allUsers.find(user => user.id == item)\n          return user_item\n      })\n    },\n\n    getVirtualParticipantsList() {\n      return this.getVirtualParticipants.map(item => {\n        let user_item = this.allUsers.find(user => user.id == item)\n          return user_item\n      })\n    },\n\n    getRatings() {\n      this.fetchedRatings = [];\n      let rating = this.allRatings.filter(item => item.event_id == this.newEvent.id)\n      return rating;\n    }\n  },\n  methods: {\n    ...mapActions(['fetchEventById','createBill', 'fetchVirtualParticipants', 'fetchRatings', 'fetchTags', 'fetchParticipants', 'eventParticipant', 'virtualParticipant', 'fetchUser', 'fetchUserById', 'saveRating']),\n    dismiss() {\n      this.modals.participateModal = false\n      this.modals.selectModal = false\n    },\n    inPersonClick() {\n      this.inPersonParticipate();\n    },\n    virtualClick() {\n      console.log(this.getSelectedEvent[0].virtual_capacity)\n      this.virtualParticipate();\n    },\n    copyLink() {\n      var copyText = window.location.href;\n      console.log(copyText)\n      document.execCommand(\"copy\");\n    },\n    clipboardSuccessHandler({ value, event }) {\n        console.log('success', value)\n    },\n    getUserDetails(id) {\n\n      // let ref = this;\n       let user_obj=this.allUsers.find(user_item=>user_item.id==id)\n       this.userDetails = user_obj\n       return user_obj\n    },\n    participateEvent() {\n      const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));\n      if(loggedUser != null) {\n        // for(var key in this.getSelectedEvent[0].users_attending){\n        //     this.userEvents.push(this.getSelectedEvent[0].users_attending[key])\n        // }\n        console.log(this.userEvents)\n        if(this.userEvents.find(element => element == this.newEvent.id)) {\n          console.log(\"Already Signed Up\")\n          this.msg = \"You are Already Signed Up\"\n          this.modals.participateModal = true\n          this.participated = true\n          return;\n        }\n        if(this.getSelectedEvent[0].event_type == 'in Person'){\n          this.inPersonParticipate();\n        }\n        if(this.getSelectedEvent[0].event_type == 'virtual'){\n          this.virtualParticipate();\n        }\n        if(this.getSelectedEvent[0].event_type == 'both') {\n          this.modals.selectModal = true\n          return;\n        }\n      }\n      else {\n        this.modals.participateModal = true\n        this.msg = \"Please Login to Participate\"\n      }\n    },\n\n    inPersonParticipate() {\n      this.modals.selectModal = false\n      if(this.total >= this.getSelectedEvent[0].capacity) {\n        this.modals.participateModal = true\n        this.msg = \"Sorry! All seats are reserved\"\n        return;\n      }\n      if(this.getSelectedEvent[0].event_price_per_person != null){\n        this.type = 'in Person'\n        this.modals.payModal = true\n        //this.msg = \"Please Pay Engagement Fee to particpate\"\n        return;\n      }\n      \n      this.sendEmail()\n      this.eventParticipant(this.newEvent)\n      this.total++;\n      this.modals.participateModal = true\n      this.msg = \"Your Seat has been confirmed\"\n      this.shown = false\n      return;\n    \n    },\n\n    virtualParticipate() {\n      this.modals.selectModal = false\n      if(this.totalVirtual >= this.getSelectedEvent[0].virtual_capacity) {\n        this.modals.participateModal = true\n        this.msg = \"Sorry! All seats are reserved\"\n        return;\n      }\n      if(this.getSelectedEvent[0].event_price_per_person != null){\n        this.type = 'virtual'\n        this.modals.payModal = true\n        //this.msg = \"Please Pay Engagement Fee to particpate\"\n        return;\n      }\n      this.sendEmail()\n      this.virtualParticipant(this.newEvent);\n      this.totalVirtual++;\n      this.modals.participateModal = true\n      this.msg = \"Your Seat has been confirmed\"\n      this.shown = false\n      return;\n    },\n\n    paidParticipant(price, by) {\n      if(this.type == 'in Person') {\n        this.sendEmail()\n        this.eventParticipant(this.newEvent)\n        const bill = {\n          user_id: this.newEvent.userId,\n          event_id: this.newEvent.id,\n          amount: price,\n          host_id: by\n        }\n        this.createBill(bill, by);\n        this.total++;\n        this.modals.payModal = false\n        this.modals.participateModal = true\n        this.msg = \"Your Seat has been confirmed\"\n        this.shown = false\n        this.disablePay = false\n        return;\n      }\n      if(this.type == 'virtual') {\n        this.sendEmail()\n        this.virtualParticipant(this.newEvent);\n        const bill = {\n          user_id: this.newEvent.userId,\n          event_id: this.newEvent.id,\n          amount: price,\n          host_id: by\n        }\n        this.createBill(bill);\n        this.totalVirtual++;\n        this.modals.payModal = false\n        this.modals.participateModal = true\n        this.msg = \"Your Seat has been confirmed\"\n        this.shown = false\n        this.disablePay = false\n        return;\n      }\n    },\n    \n    viewProfile(id) {\n      this.$router.push({path:'/users/'+id})\n    },\n\n    rateEngagementNow() {\n      this.submitEventRating.host_id = this.getSelectedEvent[0].created_by;\n      this.submitEventRating.user_id = this.newEvent.userId;\n      this.submitEventRating.event_id = this.$route.params.eventId;\n\n      this.saveRating(this.submitEventRating);\n\n      console.log(\"Feedback \" +  this.submitEventRating.feedback)\n      console.log(\"Stars \" +  this.submitEventRating.ratingStars)\n      console.log(\"Host \" +  this.submitEventRating.host_id)\n      console.log(\"User \" +  this.submitEventRating.user_id)\n      console.log(\"Event \" +  this.submitEventRating.event_id)\n    },\n\n    sendEmail() {\n      axios.post('https://us-central1-sparc-9d9cb.cloudfunctions.net/sendMail', {\n        dest: this.userEmail,\n        event: this.getSelectedEvent[0].event_name\n      }).then(() => {\n        console.log('Email Sent')\n      }).catch(err => console.log(\"Error \" + err))\n    },\n    purchase(userEmail, price) {\n      console.log('pay')\n      this.disablePay = true\n      //console.log(e)\n      var self = this;\n    stripe.createToken(card).then(function(result) {\n      if (result.error) {\n        self.hasCardErrors = true;\n        self.disablePay = false;\n        self.$forceUpdate(); // Forcing the DOM to update so the Stripe Element can update.\n        return;\n      }\n      // Access the token with result.token\n      console.log(result)\n      console.log(price*100)\n      axios.post('https://us-central1-sparc-9d9cb.cloudfunctions.net/CheckoutSession', {\n        amount: price*100,\n        email: userEmail,\n        stripeToken: result.token\n      }).then(result => {\n          if(result.data.status == 'succeeded'){\n            \n            self.paidParticipant(price, self.getSelectedEvent[0].created_by);\n          }\n        }).catch(err => {\n          self.disablePay = false;\n          console.log(err)\n        })\n      \n    });\n  }\n  },\n  created() {\n\n    this.fetchUser();\n    this.newEvent.id = this.$route.params.eventId\n    this.fetchTags();\n    this.fetchParticipants(this.newEvent);\n    this.total = this.getParticipants.length;\n\n    this.fetchVirtualParticipants(this.newEvent);\n    this.totalVirtual = this.getVirtualParticipants.length;\n    console.log(this.totalVirtual)\n\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth() + 1;\n    var yyyy = today.getFullYear();\n\n    this.currentDate = mm + \"/\" + dd + \"/\" + yyyy;\n\n    this.fetchEventById(this.newEvent);\n\n    const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));\n    if(loggedUser != null) {\n        this.userEmail = loggedUser.email\n        console.log(\"Email\")\n      console.log(this.userEmail)\n        this.newEvent.userId = loggedUser.id\n        this.isUserLogged = true;\n        for(var key in loggedUser.events_attended){\n          this.userEvents.push(loggedUser.events_attended[key])\n        }\n        // for(var key in this.getSelectedEvent[0].users_attending){\n        //   this.userEvents.push(this.getSelectedEvent[0].users_attending[key])\n        // }\n        if(this.userEvents.find(element => element == this.newEvent.id)) {\n          this.isUserParticipant = true\n          console.log(this.isUserParticipant) \n        }\n\n        for(var key in loggedUser.events_rated) {\n          this.ratedEvents.push(loggedUser.events_rated[key])\n        }\n        if(this.ratedEvents.find(element => element == this.newEvent.id)) {\n          this.isUserRated = true\n          console.log(\"Rated\" + this.isUserRated) \n        }\n\n\n    }\n    \n     \n\n    //this.getSelectedEventTags()\n    \n    // console.log(\"Participants\")\n    // console.log(this.getParticipants)\n\n    \n  },\n  watch: {\n      getParticipated(val) {\n        console.log('Watching')\n          if(val) {\n              setTimeout(() => {\n                  if(val == 'success'){\n                    this.success = true\n                    this.modals.payModal = false\n                    this.modals.participateModal = true\n                    this.msg = \"Your Seat Has Been Confirmed. Please check your Email\"\n                    console.log(\"Confirmed\")\n                    document.getElementById(\"myBtn\").style.display = 'none';\n                  }\n                }, 500)\n          }\n          else {\n            console.log('No Val')\n          }\n      },\n\n      ratingDone(val) {\n        if(val) {\n          setTimeout(() => {\n                  if(val == 'success'){\n                    this.isUserRated = true\n                    console.log(\"You Rated\")\n                  }\n                }, 500)\n        }\n      }\n  }\n};\n",{"version":3,"sources":["EventDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EventDetails.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div>\n    <div class=\"main mt-5\">\n      <div class=\"section section-images\">\n        <div class=\"container\" id=\"top\">\n          <div class=\"col-md-12\">\n              <div class=\"row\">\n                  <div class=\"col-md-12\">\n                      <b-alert class=\"mb-5\" v-if=\"!success && success != null\" show variant=\"danger\" dismissible> <i class=\"fa fa-warning\"></i> {{msg}}</b-alert> <br/>\n                      <b-alert class=\"mb-5\" v-if=\"success\" show variant=\"success\" dismissible>{{msg}}</b-alert> <br/>\n                  </div>\n              </div>\n            <div class=\"row text-center\" id=\"card-margin\">\n                <div class=\"col-md-12\">\n                <h2 class=\"text-center ml-3 title title-up mb-5\">Engagement Details</h2>\n              </div>\n            </div>\n            \n            <div class=\"row\" >\n              <div class=\"col-md-8\">\n                <b-card-group deck >\n                    <b-card border-variant=\"primary\" :img-src=\"getSelectedEvent[0].event_image == null ? noImage : getSelectedEvent[0].event_image\" img-height=\"300\" img-alt=\"Engagement image\" img-top>\n                        <!-- <img v-if=\"getSelectedEvent[0].event_image != null\" :src=\"getSelectedEvent[0].event_image\" width=\"500\" height=\"200\" alt=\"\">\n                        <img v-else src=\"../../public/sparclogo.png\" width=\"500\" height=\"200\" alt=\"\"> -->\n                        <b-card-text>\n                          <div class=\"row\">\n\n                          <div class=\"col-md-12\">\n                            <h5 class=\"text-success\"><b> {{ getSelectedEvent[0].event_name }}</b></h5>\n                            <h6> <star-rating v-model=\"eventRating\" :star-size=\"16\" disabled></star-rating></h6>\n                            \n                           </div> \n                           </div>\n                           <div class=\"row\">\n                             <div class=\"col-md-6\">\n                               <h6 class=\"text-info\"> <i class=\"fa fa-map-marker\"></i> {{ getSelectedEvent[0].event_location }}</h6>\n                                \n                              <h6 class=\"text-info\"> <i class=\"fa fa-clock-o\"></i> {{ getSelectedEvent[0].start_time + \" - \" + getSelectedEvent[0].end_time }} </h6>\n                              <h6 class=\"text-info\"> <i class=\"fa fa-calendar\"></i> {{ getSelectedEvent[0].date }}</h6>\n                              <h6 v-if=\"isUserLogged\" class=\"text-info\"> <i class=\"fa fa-mobile\"></i> {{ getSelectedEvent[0].host_contact }}</h6>\n                             </div>\n                             <div class=\"col-md-6\" v-if=\"isUserLogged\">\n                               <h6 class=\"text-info\"> <i class=\"fa fa-address-card-o\"></i> {{ getSelectedEvent[0].event_address }}</h6>\n                               <h6 class=\"text-info\"> <i class=\"fa fa-globe-americas\"></i> {{ getSelectedEvent[0].event_location_access }}</h6>\n                               <h6 class=\"text-info\"> <i class=\"fa fa-location-arrow\"></i> {{ getSelectedEvent[0].event_space }}</h6>\n                             </div>\n                           </div>\n                        </b-card-text>\n                    </b-card>\n                </b-card-group>\n                <b-card class=\"mt-3\" v-if=\"isUserParticipant && (getSelectedEvent[0].event_type == 'virtual' || getSelectedEvent[0].event_type == 'both')\">\n                  <h4 class=\"title-up text-info\">Engagement Links</h4>\n                  <div class=\"row\">\n                    <div class=\"col-md-4\">\n                      <h6 class=\"text-success\">Zoom:</h6>\n                    </div>\n                    <div class=\"col-md-8\">\n                      <h6>{{getSelectedEvent[0].zoom_link}}</h6>\n                    </div>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"col-md-4\">\n                      <h6 class=\"text-success\">Google Hangout:</h6>\n                    </div>\n                    <div class=\"col-md-8\">\n                      <h6>{{getSelectedEvent[0].google_link}}</h6>\n                    </div>\n                  </div>\n                  \n                 \n                </b-card>\n                <b-card class=\"mt-3\" v-if=\"Date.parse(currentDate) > Date.parse(getSelectedEvent[0].date) && isUserParticipant && !isUserRated\">\n                  <b-card-text>\n                    <div class=\"col-md-12\">\n                      <h4 class=\"title-up text-info\">Rate Your Experience</h4>\n                      <star-rating v-model=\"submitEventRating.ratingStars\" :star-size=\"36\" :increment=\"0.5\"></star-rating>\n                      <h6 class=\"mt-3\">Feedback</h6>\n                      <div class=\"row\">\n                        <div class=\"col-md-8\">\n                        <textarea class=\"form-control\" v-model=\"submitEventRating.feedback\" placeholder=\"Give your Feedback...\"></textarea>\n                      </div>\n                      <div class=\"col-md-3\">\n                        <button class=\"btn btn-success mt-3\" @click=\"rateEngagementNow\">Rate Now</button>\n                      </div>\n                      </div>\n                    </div>\n                  </b-card-text>\n                </b-card>\n                <b-card class=\"mt-2\" v-if=\"Date.parse(currentDate) > Date.parse(getSelectedEvent[0].date)\">\n                  <b-card-text>\n                    <h4 class=\"title-up text-info\">Engagement Reviews</h4>\n                    <div class=\"col-md-12\" v-for=\"(rating, index) in getRatings\" :key=\"index\">\n                      <h6 class=\"text-success\">{{getUserDetails(rating.user_id).first_name}}</h6>\n                      <star-rating :rating=\"rating.ratingStars\" :read-only=\"true\" :star-size=\"16\" :increment=\"0.5\"></star-rating>\n                      <strong>{{rating.feedback}}</strong>\n                      <hr>\n                    </div>\n                  </b-card-text>\n                </b-card>\n              </div>\n              <div class=\"col-md-4\">\n                  <div class=\"event-info\">\n                      <h5 class=\"text-info\"><b>Engagement Description</b></h5>\n                      <p>{{ getSelectedEvent[0].event_description }}</p>\n                      <h6 class=\"text-danger text-center\"></h6>\n                      <a class=\"btn btn-success text-white btn-block\" id=\"myBtn\" @click=\"participateEvent\" v-if=\"Date.parse(currentDate) <= Date.parse(getSelectedEvent[0].date) && shown \"> <span v-if=\"participated\">You are Already Signed Up</span> <span v-if=\"!participated\">PARTICIPATE NOW</span> </a>\n                      <button class=\"btn btn-danger btn-block\" v-else-if=\"Date.parse(currentDate) > Date.parse(getSelectedEvent[0].date)\" disabled>Engagement Expired</button>\n                  </div>\n                  <div class=\"event-info mt-2\">\n                      <h5 class=\"text-info\"><b>Engagement Extras</b></h5>\n                      <h6><b class=\"text-success\">Engagement Free: </b> {{getSelectedEvent[0].event_free}}</h6>\n                      <h6><b class=\"text-success\">Engagement Type: </b> {{getSelectedEvent[0].event_type}}</h6>\n                      <h6 v-if=\"getSelectedEvent[0].event_price_per_person != null\"><b class=\"text-success\">Engagement Price: </b> $ {{getSelectedEvent[0].event_price_per_person}} PER PERSON</h6>\n                      <h6><b class=\"text-success\">Engagement Cause: </b> {{getSelectedEvent[0].cause}}</h6>\n                      \n                      <h6 v-if=\"getSelectedEvent[0].capacity != null\"><b class=\"text-success\">People capacity: </b> {{getSelectedEvent[0].capacity}}</h6>\n                      <h6 v-if=\"getSelectedEvent[0].capacity != null\"><b class=\"text-success\">Seats Reserved: </b> {{total}}</h6>\n                      <div v-if=\"getSelectedEvent[0].capacity == null && getSelectedEvent[0].virtual_capacity != null\">\n                        <h6><b class=\"text-success\">Virtual capacity: </b> {{getSelectedEvent[0].virtual_capacity}}</h6>\n                        <h6><b class=\"text-success\">Seats Reserved: </b> {{totalVirtual}}</h6>\n                      </div>\n                      <div v-if=\"getSelectedEvent[0].capacity != null && getSelectedEvent[0].virtual_capacity != null\">\n                        <h6><b class=\"text-success\">Virtual capacity: </b> {{getSelectedEvent[0].virtual_capacity}}</h6>\n                        <h6><b class=\"text-success\">Seats Reserved: </b> {{totalVirtual}}</h6>\n                      </div>\n                      \n                      <h5 class=\"text-info mt-4\"><b>Engagement Tags</b></h5>\n                      <span class=\"badge badge-pill badge-success\" v-for=\"(tag,index) in getEventTags\" :key=\"index\">{{tag.value}}</span>\n                  </div>\n                  <div class=\"event-info mt-2\">\n                    <h5 class=\"text-info\"><b>Host Information</b></h5>\n                     <p style=\"display:none;\">{{getUserDetails(getSelectedEvent[0].created_by) }}</p>\n                     <img class=\"rounded-circle\" v-if=\"userDetails.profile_image != null\" :src=\"userDetails.profile_image\" width=\"30\" alt=\"\">\n                     <span class=\"ml-3\" v-if=\"userDetails.first_name != undefined\">\n                       <b>{{userDetails.first_name + \" \" + userDetails.last_name}}</b> \n                     </span>\n                     <button class=\"btn btn-info btn-block\" @click=\"viewProfile(getSelectedEvent[0].created_by)\">View Profile</button>\n                  </div>\n                  <div class=\"mb-5\">\n                    <div class=\"event-info mt-2\" v-if=\"getSelectedEvent[0].event_type == 'in Person' || getSelectedEvent[0].event_type == 'both'\">\n                    <h5 class=\"text-info\"><b>In Person Participants</b></h5>\n                      <div class=\"col-md-12\" v-for=\"(user, index) in getParticipantsList\" :key=\"index\">\n                        <strong class=\"text-success\">{{ user.first_name + \" \" + user.last_name}}</strong>\n                      </div>\n                  </div>\n                  <div class=\"event-info mt-2\" v-if=\"getSelectedEvent[0].event_type == 'virtual' || getSelectedEvent[0].event_type == 'both'\">\n                    <h5 class=\"text-info\"><b>Virtual Participants</b></h5>\n                      <div class=\"col-md-12\" v-for=\"(user, index) in getVirtualParticipantsList\" :key=\"index\">\n                        <strong class=\"text-success\">{{ user.first_name + \" \" + user.last_name}}</strong>\n                      </div>\n                  </div>\n                  </div>\n                  \n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <modal :show.sync=\"modals.participateModal\" headerClasses=\"justify-content-center\">\n      <h4 slot=\"header\" class=\"title title-up\">Event Participation</h4>\n      <h4 class=\"text-danger text-center\">{{msg}}</h4>\n      <a class=\"btn btn-success text-center text-white btn-block\" v-clipboard=\"() => url\" v-clipboard:success=\"clipboardSuccessHandler\">Copy Link</a>\n      <button class=\"btn btn-danger btn-block\" @click=\"dismiss\">Close</button>\n    </modal>\n\n    <modal :show.sync=\"modals.selectModal\" headerClasses=\"justify-content-center\">\n      <h4 slot=\"header\" class=\"title title-up\">I want to Participate in</h4>\n      <div class=\"row\">\n          <div class=\"col-md-2\"></div>\n          <div class=\"col-md-4\">\n            <button class=\"btn btn-warning\" @click=\"virtualClick\"> <i class=\"fa fa-video-camera\"></i> Virtual</button>\n          </div>\n        <div class=\"col-md-4\">\n          <button class=\"btn btn-info\" @click=\"inPersonClick\"><i class=\"fa fa-user\"></i> In Person</button>\n        </div>\n        \n      </div>\n      <a class=\"btn btn-success text-center text-white btn-block\" v-clipboard=\"() => url\" v-clipboard:success=\"clipboardSuccessHandler\">Copy Link</a>\n      <button class=\"btn btn-danger btn-block\" @click=\"dismiss\">Close</button>\n      </modal>\n\n      <modal :show.sync=\"modals.payModal\" headerClasses=\"justify-content-center\">\n        <h4 slot=\"header\" class=\"text-danger text-center\">Please Pay Participation Amount to Continue</h4>\n        <div ref=\"card\"></div>\n        <button class=\"btn btn-primary btn-block\" :disabled=\"disablePay\" v-on:click=\"purchase(userEmail, getSelectedEvent[0].event_price_per_person)\">Pay Now</button>\n      </modal>\n    \n  </div>\n</template>\n<script>\nlet stripe = Stripe(`pk_test_VkqrGCFhu1QHtAQJ5xtAYdIH00dooEGlrN`),\n    elements = stripe.elements(),\n    card = undefined;\nimport { Parallax, FormGroupInput, Alert, Modal } from '@/components';\nimport axios from 'axios'\nimport { mapGetters, mapActions } from 'vuex'\nexport default {\n  name: 'event-details',\n  bodyClass: 'event-details-page',\n  destroyed() {\n    card.destroy(this.$refs.card)\n  },\n   mounted: function () {\n\n     let style = {\n      base: {\n        color: '#32325d',\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#aab7c4'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n\n    };\n    card = elements.create('card', {style: style});\n    card.mount(this.$refs.card);\n  },\n  components: {\n    Parallax,\n    Alert,\n    Modal,\n    [FormGroupInput.name]: FormGroupInput,\n  },\n  data() {\n    return {\n      \n      noImage: require('../../public/sparcS.png'),\n      modals: {\n        participateModal: false,\n        selectModal: false,\n        payModal: false\n      },\n      url: window.location.href,\n      rating: 0,\n      eventRating: 5,\n      success: null,\n      event: [],\n      fetchedTags: [],\n      tagName: [],\n      newEvent: {\n          id: null,\n          userId: null\n      },\n      msg: null,\n      userEvents: [],\n      ratedEvents: [],\n      total: 0,\n      totalVirtual: 0,\n      currentDate: null,\n      userDetails: {},\n      participated: false,\n      participantsList: [],\n\n      submitEventRating: {\n        ratingStars: null,\n        feedback: null,\n        host_id: null,\n        event_id: null,\n        user_id: null,\n      },\n\n      isUserParticipant: false,\n      isUserRated: false,\n      isUserLogged: false,\n      fetchedRatings: [],\n      shown: true,\n      userEmail: null,\n      type: null,\n      disablePay: false\n    }\n  },\n  computed: {\n    ...mapGetters(['getSelectedEvent', 'allTags', 'getParticipants', 'getVirtualParticipants', 'user','allUsers', 'allRatings', 'ratingDone']),\n\n    getEventTags() {\n        this.fetchedTags = this.getSelectedEvent[0].tags\n        return this.fetchedTags.map(element => {\n            let eventTag = this.allTags.find(tag => tag.id==element)\n            return eventTag\n        });   \n    },\n\n    getParticipantsList() {\n      this.participantsList = [];\n      return this.getParticipants.map(item => {\n        let user_item = this.allUsers.find(user => user.id == item)\n          return user_item\n      })\n    },\n\n    getVirtualParticipantsList() {\n      return this.getVirtualParticipants.map(item => {\n        let user_item = this.allUsers.find(user => user.id == item)\n          return user_item\n      })\n    },\n\n    getRatings() {\n      this.fetchedRatings = [];\n      let rating = this.allRatings.filter(item => item.event_id == this.newEvent.id)\n      return rating;\n    }\n  },\n  methods: {\n    ...mapActions(['fetchEventById','createBill', 'fetchVirtualParticipants', 'fetchRatings', 'fetchTags', 'fetchParticipants', 'eventParticipant', 'virtualParticipant', 'fetchUser', 'fetchUserById', 'saveRating']),\n    dismiss() {\n      this.modals.participateModal = false\n      this.modals.selectModal = false\n    },\n    inPersonClick() {\n      this.inPersonParticipate();\n    },\n    virtualClick() {\n      console.log(this.getSelectedEvent[0].virtual_capacity)\n      this.virtualParticipate();\n    },\n    copyLink() {\n      var copyText = window.location.href;\n      console.log(copyText)\n      document.execCommand(\"copy\");\n    },\n    clipboardSuccessHandler({ value, event }) {\n        console.log('success', value)\n    },\n    getUserDetails(id) {\n\n      // let ref = this;\n       let user_obj=this.allUsers.find(user_item=>user_item.id==id)\n       this.userDetails = user_obj\n       return user_obj\n    },\n    participateEvent() {\n      const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));\n      if(loggedUser != null) {\n        // for(var key in this.getSelectedEvent[0].users_attending){\n        //     this.userEvents.push(this.getSelectedEvent[0].users_attending[key])\n        // }\n        console.log(this.userEvents)\n        if(this.userEvents.find(element => element == this.newEvent.id)) {\n          console.log(\"Already Signed Up\")\n          this.msg = \"You are Already Signed Up\"\n          this.modals.participateModal = true\n          this.participated = true\n          return;\n        }\n        if(this.getSelectedEvent[0].event_type == 'in Person'){\n          this.inPersonParticipate();\n        }\n        if(this.getSelectedEvent[0].event_type == 'virtual'){\n          this.virtualParticipate();\n        }\n        if(this.getSelectedEvent[0].event_type == 'both') {\n          this.modals.selectModal = true\n          return;\n        }\n      }\n      else {\n        this.modals.participateModal = true\n        this.msg = \"Please Login to Participate\"\n      }\n    },\n\n    inPersonParticipate() {\n      this.modals.selectModal = false\n      if(this.total >= this.getSelectedEvent[0].capacity) {\n        this.modals.participateModal = true\n        this.msg = \"Sorry! All seats are reserved\"\n        return;\n      }\n      if(this.getSelectedEvent[0].event_price_per_person != null){\n        this.type = 'in Person'\n        this.modals.payModal = true\n        //this.msg = \"Please Pay Engagement Fee to particpate\"\n        return;\n      }\n      \n      this.sendEmail()\n      this.eventParticipant(this.newEvent)\n      this.total++;\n      this.modals.participateModal = true\n      this.msg = \"Your Seat has been confirmed\"\n      this.shown = false\n      return;\n    \n    },\n\n    virtualParticipate() {\n      this.modals.selectModal = false\n      if(this.totalVirtual >= this.getSelectedEvent[0].virtual_capacity) {\n        this.modals.participateModal = true\n        this.msg = \"Sorry! All seats are reserved\"\n        return;\n      }\n      if(this.getSelectedEvent[0].event_price_per_person != null){\n        this.type = 'virtual'\n        this.modals.payModal = true\n        //this.msg = \"Please Pay Engagement Fee to particpate\"\n        return;\n      }\n      this.sendEmail()\n      this.virtualParticipant(this.newEvent);\n      this.totalVirtual++;\n      this.modals.participateModal = true\n      this.msg = \"Your Seat has been confirmed\"\n      this.shown = false\n      return;\n    },\n\n    paidParticipant(price, by) {\n      if(this.type == 'in Person') {\n        this.sendEmail()\n        this.eventParticipant(this.newEvent)\n        const bill = {\n          user_id: this.newEvent.userId,\n          event_id: this.newEvent.id,\n          amount: price,\n          host_id: by\n        }\n        this.createBill(bill, by);\n        this.total++;\n        this.modals.payModal = false\n        this.modals.participateModal = true\n        this.msg = \"Your Seat has been confirmed\"\n        this.shown = false\n        this.disablePay = false\n        return;\n      }\n      if(this.type == 'virtual') {\n        this.sendEmail()\n        this.virtualParticipant(this.newEvent);\n        const bill = {\n          user_id: this.newEvent.userId,\n          event_id: this.newEvent.id,\n          amount: price,\n          host_id: by\n        }\n        this.createBill(bill);\n        this.totalVirtual++;\n        this.modals.payModal = false\n        this.modals.participateModal = true\n        this.msg = \"Your Seat has been confirmed\"\n        this.shown = false\n        this.disablePay = false\n        return;\n      }\n    },\n    \n    viewProfile(id) {\n      this.$router.push({path:'/users/'+id})\n    },\n\n    rateEngagementNow() {\n      this.submitEventRating.host_id = this.getSelectedEvent[0].created_by;\n      this.submitEventRating.user_id = this.newEvent.userId;\n      this.submitEventRating.event_id = this.$route.params.eventId;\n\n      this.saveRating(this.submitEventRating);\n\n      console.log(\"Feedback \" +  this.submitEventRating.feedback)\n      console.log(\"Stars \" +  this.submitEventRating.ratingStars)\n      console.log(\"Host \" +  this.submitEventRating.host_id)\n      console.log(\"User \" +  this.submitEventRating.user_id)\n      console.log(\"Event \" +  this.submitEventRating.event_id)\n    },\n\n    sendEmail() {\n      axios.post('https://us-central1-sparc-9d9cb.cloudfunctions.net/sendMail', {\n        dest: this.userEmail,\n        event: this.getSelectedEvent[0].event_name\n      }).then(() => {\n        console.log('Email Sent')\n      }).catch(err => console.log(\"Error \" + err))\n    },\n    purchase(userEmail, price) {\n      console.log('pay')\n      this.disablePay = true\n      //console.log(e)\n      var self = this;\n    stripe.createToken(card).then(function(result) {\n      if (result.error) {\n        self.hasCardErrors = true;\n        self.disablePay = false;\n        self.$forceUpdate(); // Forcing the DOM to update so the Stripe Element can update.\n        return;\n      }\n      // Access the token with result.token\n      console.log(result)\n      console.log(price*100)\n      axios.post('https://us-central1-sparc-9d9cb.cloudfunctions.net/CheckoutSession', {\n        amount: price*100,\n        email: userEmail,\n        stripeToken: result.token\n      }).then(result => {\n          if(result.data.status == 'succeeded'){\n            \n            self.paidParticipant(price, self.getSelectedEvent[0].created_by);\n          }\n        }).catch(err => {\n          self.disablePay = false;\n          console.log(err)\n        })\n      \n    });\n  }\n  },\n  created() {\n\n    this.fetchUser();\n    this.newEvent.id = this.$route.params.eventId\n    this.fetchTags();\n    this.fetchParticipants(this.newEvent);\n    this.total = this.getParticipants.length;\n\n    this.fetchVirtualParticipants(this.newEvent);\n    this.totalVirtual = this.getVirtualParticipants.length;\n    console.log(this.totalVirtual)\n\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth() + 1;\n    var yyyy = today.getFullYear();\n\n    this.currentDate = mm + \"/\" + dd + \"/\" + yyyy;\n\n    this.fetchEventById(this.newEvent);\n\n    const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));\n    if(loggedUser != null) {\n        this.userEmail = loggedUser.email\n        console.log(\"Email\")\n      console.log(this.userEmail)\n        this.newEvent.userId = loggedUser.id\n        this.isUserLogged = true;\n        for(var key in loggedUser.events_attended){\n          this.userEvents.push(loggedUser.events_attended[key])\n        }\n        // for(var key in this.getSelectedEvent[0].users_attending){\n        //   this.userEvents.push(this.getSelectedEvent[0].users_attending[key])\n        // }\n        if(this.userEvents.find(element => element == this.newEvent.id)) {\n          this.isUserParticipant = true\n          console.log(this.isUserParticipant) \n        }\n\n        for(var key in loggedUser.events_rated) {\n          this.ratedEvents.push(loggedUser.events_rated[key])\n        }\n        if(this.ratedEvents.find(element => element == this.newEvent.id)) {\n          this.isUserRated = true\n          console.log(\"Rated\" + this.isUserRated) \n        }\n\n\n    }\n    \n     \n\n    //this.getSelectedEventTags()\n    \n    // console.log(\"Participants\")\n    // console.log(this.getParticipants)\n\n    \n  },\n  watch: {\n      getParticipated(val) {\n        console.log('Watching')\n          if(val) {\n              setTimeout(() => {\n                  if(val == 'success'){\n                    this.success = true\n                    this.modals.payModal = false\n                    this.modals.participateModal = true\n                    this.msg = \"Your Seat Has Been Confirmed. Please check your Email\"\n                    console.log(\"Confirmed\")\n                    document.getElementById(\"myBtn\").style.display = 'none';\n                  }\n                }, 500)\n          }\n          else {\n            console.log('No Val')\n          }\n      },\n\n      ratingDone(val) {\n        if(val) {\n          setTimeout(() => {\n                  if(val == 'success'){\n                    this.isUserRated = true\n                    console.log(\"You Rated\")\n                  }\n                }, 500)\n        }\n      }\n  }\n};\n</script>\n<style scoped>\n  input[type=\"text\"] {\n    color: #fff;\n  }\n  #image {\n      max-width: 100%;\n      width: 100%;\n      height: 400px;\n  }\n  #card-margin {\n      margin-top: -70px;\n  }\n  .event-info {\n    padding: 10px;\n    border: 2px solid #e5e5e5;\n  }\n  #top {\n    margin-top: -70px;\n  }\n\n  .StripeElement {\n  box-sizing: border-box;\n\n  height: 40px;\n\n  padding: 10px 12px;\n\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: white;\n\n  box-shadow: 0 1px 3px 0 #e6ebf1;\n  -webkit-transition: box-shadow 150ms ease;\n  transition: box-shadow 150ms ease;\n}\n\n.StripeElement--focus {\n  box-shadow: 0 1px 3px 0 #cfd7df;\n}\n\n.StripeElement--invalid {\n  border-color: #fa755a;\n}\n\n.StripeElement--webkit-autofill {\n  background-color: #fefde5 !important;\n}\n</style>\n  "]}]}